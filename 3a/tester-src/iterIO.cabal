Name:           iterIO
Version:        0.0
Cabal-version:  >= 1.6
build-type:     Simple
License:        BSD3
License-file:   LICENSE
Author:         David Mazieres
Stability:      experimental
Maintainer:     http://www.scs.stanford.edu/~dm/addr/
Category:       System, Data
Synopsis:       Iteratee-based IO with pipe operators
Extra-source-files:
        GNUmakefile, README, Examples/fgrep.hs, Examples/zpipe.hs,
        Examples/reliable/Arc4.hs, Examples/reliable/NetSim.hs,
        Examples/reliable/Protocol.hs, Examples/reliable/TM.hs,
        Examples/reliable/Target.hs, Examples/reliable/reference.hs,
        Examples/reliable/tester.hs

Description:

        Iteratee-based IO is an alternative to lazy IO that offers
        better error handling, referential transparency, and
        convenient composition of protocol layers or parsers.  New
        users should see the tutorial in the "Data.IterIO" module
        documentation.

	.

	The Iteratee approach was originally advocated by Oleg
        Kiselyov (see talk slides at
        <http://okmij.org/ftp/Streams.html#iteratee>).  The main
        implementation by Kiselyov and John Lato is simply called
        /iteratee/ (<http://hackage.haskell.org/package/iteratee>).
        This package is a re-implementation of the Iteratee concepts
        with a new interface designed to simplify many of the
        abstractions and make them easier to use.  The author of this
        package is particularly grateful to John Lato for helping him
        understand much of the important design rationale behind the
        original iteratee package.

	.

        The latest development version of the iterIO sources is
        available via git by executing:
        .       
        > git clone http://www.scs.stanford.edu/~dm/repos/iterIO.git

Source-repository head
  Type:     git
  Location: http://www.scs.stanford.edu/~dm/repos/iterIO.git

Library
  Build-depends: base >= 4 && < 5,
                 binary >= 0.5 && < 2,
                 bytestring >= 0.9 && < 2,
                 containers >= 0.3 && < 2,
                 stringsearch >= 0.3 && < 2,
                 mtl >= 1.1.0.2 && < 2,
                 network >= 2.2 && < 3.0,
                 ListLike >= 1.0 && < 2,
                 directory >= 1.0 && < 2
  Exposed-modules:
    Data.IterIO, Data.IterIO.Base, Data.IterIO.Inum,
    Data.IterIO.ListLike, Data.IterIO.Parse, Data.IterIO.Extra,
    Data.IterIO.Search, Data.IterIO.Zlib
  Other-modules:
    Data.IterIO.ZlibInt
  Extensions:
    ForeignFunctionInterface, DeriveDataTypeable,
    ExistentialQuantification, MultiParamTypeClasses,
    FunctionalDependencies, FlexibleInstances
  Extra-libraries: z
